service: wrappers-io-gateway
provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  memorySize: 128
  timeout: 3
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UploadedWrappersTable, Arn ]
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: "arn:aws:s3:::wrappers-bucket/*"
  environment:
    UPLOADED_WRAPPERS_TABLE: ${self:custom.wrappersTable}
    GLOBALS_TABLE: ${self:custom.globalsTable}

package: 
  individually: true

custom:
  serverless-offline:
    reloadHandler: true
  rust:
    dockerless: true
  customDomain:
    domainName: gateway.wrappers.dev
    stage: ${self:provider.stage}
    certificateName: wrappers.dev
    createRoute53Record: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8001
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
  s3:
    host: localhost
    port: 8000
    directory: ./.s3-local
  wrappersTable: 'uploaded-wrappers-table-${sls:stage}'
  globalsTable: 'globals-table-${sls:stage}'

plugins:
  - serverless-domain-manager
  - serverless-rust
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline

functions:
  home:
    handler: home
    runtime: rust
    package:
      exclude:
        - /**
      include:
        - ./rust/home/**
    events:
      - http:
          path: /
          method: get
          cors: true
  pins:
    handler: pins
    runtime: rust
    package:
      exclude:
        - /**
      include:
        - ./rust/pins/**
    events:
      - http:
          path: pins
          method: get
          cors: true
  status:
    handler: ./typescript/functions/status/build/status.status
    runtime: nodejs16.x
    package:
      exclude:
        - ./**
      include:
        - ./typescript/functions/status/**
    events:
      - http:
          path: status
          method: get
          cors: true
  apiV0Add:
    handler: ./typescript/functions/apiV0Add/build/index.apiV0Add
    runtime: nodejs16.x
    memorySize: 256
    timeout: 20
    environment:
      WRAPPERS_BUCKET: wrappers-bucket
    package:
      exclude:
        - ./**
      include:
        - ./typescript/functions/apiV0Add/build/**
        - ./typescript/functions/apiV0Add/node_modules/**
    events:
      - http:
          path: ipfs/add
          method: post
          cors: true
  validateWrapperAndCalcCids:
    name: validateWrapperAndCalcCids
    handler: ./typescript/functions/validateWrapperAndCalcCids/build/index.validateWrapperAndCalcCids
    runtime: nodejs16.x
    memorySize: 256
    timeout: 10
    package:
      exclude:
        - ./**
      include:
        - ./typescript/functions/validateWrapperAndCalcCids/build/**
        - ./typescript/functions/validateWrapperAndCalcCids/node_modules/**

resources:
  Resources:
    WrappersBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: wrappers-bucket
    UploadedWrappersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: cid
            AttributeType: S
        KeySchema:
          - AttributeName: cid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.wrappersTable}
    GlobalsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.globalsTable}